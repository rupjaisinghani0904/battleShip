package cs3500.pa04.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * represents an AiPlayer who's shots are generated by the computer
 */
public class AiPlayer extends AbstractPlayer {
  private final List<Coord> prevShots;
  private final List<Coord> loadedShots;

  /**
   * creates a new instance of AiPlayer
   *
   * @param rand random object to generate integers from
   */
  public AiPlayer(Random rand, Board oppBoard) {
    super("AI Player", rand, oppBoard);
    this.prevShots = new ArrayList<>();
    this.loadedShots = new ArrayList<>();
  }

  /**
   * Fires shots to opponenent
   *
   * @return list of fired shots
   */
  @Override
  public List<Coord> takeShots() {
    if (ships.size() > oppBoard.countShotsLeft()) {
      return getShots(oppBoard.countShotsLeft());
    } else {
      return getShots(ships.size());
    }
  }

  /**
   * gets Ai players shots given number of shots to get
   *
   * @param count number of shots to get
   * @return AI player shots as a list of Coord
   */
  private List<Coord> getShots(int count) {
    List<Coord> playerShots = new ArrayList<>();
    Coord c;
    Coord shot;
    while (playerShots.size() < count) {
      if (loadedShots.isEmpty()) {
        c = new Coord(rand.nextInt(oppBoard.getWidth()),
            rand.nextInt(oppBoard.getHeight()), CoordStatus.Shot);
        shot = oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn());
        while (prevShots.contains(shot)) {
          c = new Coord(rand.nextInt(oppBoard.getWidth()),
              rand.nextInt(oppBoard.getHeight()), CoordStatus.Shot);
          shot = oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn());
        }
        playerShots.add(shot);
        prevShots.add(shot);
      } else {
        c = loadedShots.remove(0);
        shot = oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn());
        while (prevShots.contains(shot) && loadedShots.size() > 0) {
          c = loadedShots.remove(0);
          shot = oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn());
        }
        if (loadedShots.size() > 0) {
          playerShots.add(shot);
          prevShots.add(shot);
        }
      }
    }
    return playerShots;
  }


  /**
   * Reports to this player what shots in their previous volley returned from takeShots()
   * successfully hit an opponent's ship.
   *
   * @param shotsThatHitOpponentShips the list of shots that successfully hit the opponent's ships
   */
  @Override
  public void successfulHits(List<Coord> shotsThatHitOpponentShips) {
    for (Coord c : shotsThatHitOpponentShips) {
      c.setStatus(CoordStatus.Hit);
      loadNeighbours(c);
    }
  }

  /**
   * adds shots for the AiPlayer to aim at based on the giuven coord
   *
   * @param c Coord that the player has shot at
   */
  private void loadNeighbours(Coord c) {
    if (c.getXPosn() == 0 && c.getYPosn() == 0) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
    } else if (c.getXPosn() == 0 && c.getYPosn() > 0
        && c.getYPosn() < oppBoard.getHeight() - 1) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
    } else if (c.getXPosn() == oppBoard.getWidth() - 1
        && c.getYPosn() == oppBoard.getHeight() - 1) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
    } else if (c.getXPosn() == oppBoard.getWidth() - 1
        && c.getYPosn() < oppBoard.getHeight() - 1 && c.getYPosn() > 0) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
    } else if (c.getXPosn() > 0 && c.getXPosn() < oppBoard.getWidth() - 1 && c.getYPosn() == 0) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
    } else if (c.getXPosn() > 0 && c.getXPosn() < oppBoard.getWidth() - 1
        && c.getYPosn() == oppBoard.getHeight() - 1) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
    } else if (c.getXPosn() == 0 && c.getYPosn() == oppBoard.getHeight() - 1) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
    } else if (c.getYPosn() == 0 && c.getXPosn() == oppBoard.getWidth() - 1) {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
    } else {
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() + 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() - 1).get(c.getXPosn()));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn()).get(c.getXPosn() - 1));
      loadedShots.add(oppBoard.getBoard().get(c.getYPosn() + 1).get(c.getXPosn()));
    }
  }
}
